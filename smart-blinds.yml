substitutions:
    devicename: smart-blind
    upper_devicename: Smart Blind
    stepper: my_stepper # Name of the stepper motor (leave as is)
    speed: '200' # Set the speed of the motor


# NOTE:  If you find that your shades are going the wrong way, you can change the pin
#        settings or reverse the + and â€“ wires for each of the A and B motor
#        pairs on your driver and the motor will spin in the opposite direction.

# These pinouts are for the original 'Motor on a Roller Blind'

# This sketch will add 2 switches named <upper_devicename> Setup Switch and Setup Button
# Use your mobile or tablet and connect to http://<devicename>.local to set up the blind
# Turn on the Setup Switch to enter Setup Mode and use the Setup Button as shown below to setup blinds.

# 1) Turn on the Setup Switch to enter setup mode
# 2) Press Setup button to start the blind closing
# 3) Press Setup button again when closed and blind starts to open (actually resets the stepper position to 0)
# 4) Press Setup button again when blind is fully open
# 5) Job Done

# This sketch also includes a momentary button on D7 which can be used in the following way
# 1) Press button for > 1 second to enter setup mode
# 2) Press button again to start the blind closing
# 3) Press button again when closed and blind starts to open (actually resets the stepper position to 0)
# 4) Press button again when blind is fully open
# 5) Job Done

# Button is also used to open/close the blind (must be fully open/closed first)

# Copy these files to the config/esphome/ directory
# Don't compile this sketch, edit testblind.yaml (if required) and compile that sketch
# You won't be able to see this sketch in HA (because of the . at the front of the filename)

esphome:
  name: smart-blind
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    - priority: -200.0
      then:
      - stepper.report_position: # Set stepper to global variable
          id: $stepper
          position: !lambda return id(${stepper}_global);
      - stepper.set_target: # Set stepper to global variable
          id: $stepper
          target: !lambda return id(${stepper}_global);
      - if: # If blind is Closed
          condition:
            - lambda: 'return id(${stepper}_global) == 0;'
          then: # Publish state etc.
            - cover.template.publish:
                id: blind
                state: CLOSED
                current_operation: IDLE
      - if: # If blind is Open
          condition:
            - lambda: 'return id(${stepper}_global) == id(endstop);'
          then: # Publish state etc.
            - cover.template.publish:
                id: blind
                state: OPEN
                current_operation: IDLE
      - if: # If blind is Neither
          condition:
            - lambda: 'return (id(${stepper}_global) != 0) && (id(${stepper}_global) != id(endstop));'
          then: #  # Publish state etc.
            - cover.template.publish:
                id: blind
                position: !lambda 'return (float(float(id($stepper).current_position) / float(id(endstop))));' 
                current_operation: IDLE



wifi:

  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Smartblind Fallback Hotspot"
    password: 12qwaszx


logger:
  level: INFO

api:
  services:
    - service: control_blind_speed
      variables:
        speed: int
      then:
        - stepper.set_speed:
            id: $stepper
            speed: !lambda 'return speed;'
        - globals.set:
            id: motor_speed_global
            value: !lambda 'return speed;'

ota:

captive_portal:

stepper:
  - platform: a4988
    id: $stepper
    step_pin: GPIO19
    dir_pin: GPIO18
    sleep_pin:
        number: GPIO21
        inverted: true
    max_speed: ${speed}
    
    acceleration: inf
    deceleration: inf
    

globals:
  - id: ${stepper}_global # Integer for storing the stepper position in case of reboot
    type: int
    restore_value: True
    initial_value: '0'

  - id: openclosed # Boolean to store OPEN/CLOSED state
    type: bool
    restore_value: True
    initial_value: '0'

  - id: endstop # Variable for storing ENDSTOP (how far to move stepper)
    type: int
    restore_value: True
    initial_value: '30000'

  - id: settingmode # Integer for Setup Mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: motor_speed_global
    type: int
    restore_value: yes
    initial_value: ${speed}
    
switch:
  - platform: template
    name: ${upper_devicename} Setup Switch # Switch to enter Setup Mode
    id: setupswitch
    lambda: |-
      if (id(settingmode) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: "Entered Settings Mode"
        - globals.set:
            id: settingmode
            value:  '1'
    turn_off_action:
      then:
        - logger.log: "Exiting Settings Mode"
        - globals.set:
            id: settingmode
            value:  '0'
  - platform: template
    name: ${upper_devicename} Setup Button # Switch to replicate the Physical Button
    id: hasetup
    turn_on_action:
      - if: # If settings variable is on
          condition:
            - lambda: 'return id(settingmode) != 0;'
          then: # Enter Setting Mode
            - script.execute: setupbutton
            - switch.turn_off: hasetup


cover:
  - platform: template
    name: $upper_devicename
    id: blind
    open_action:
      then:
        - logger.log: "Opening"
        - stepper.set_target: # Send stepper to endstop
            id: $stepper
            target: !lambda return id(endstop);
        - cover.template.publish:
            id: blind
            position: !lambda 'return (float(float(id($stepper).current_position) / float(id(endstop))));' 
            current_operation: OPENING
        - wait_until: # Wait until endstop reached
            lambda: 'return (id($stepper).current_position == id(endstop));'
        - globals.set: # Set global to current position
            id: ${stepper}_global
            value: !lambda return id($stepper).current_position; 
        - globals.set: # Set toggle to OPEN (No need for 'optimistic mode')
            id: openclosed
            value: '1'
        - cover.template.publish:
            id: blind
            state: OPEN 
            current_operation: IDLE
    close_action:
      then:
        - logger.log: "Closing"
        - stepper.set_target: # Send stepper to 0
            id: $stepper
            target: '0'
        - cover.template.publish:
            id: blind
            position: !lambda 'return (float(float(id($stepper).current_position) / float(id(endstop))));' 
            current_operation: CLOSING
        - wait_until: # Wait until endstop reached
            lambda: 'return id($stepper).current_position == 0;'
        - globals.set: # Set global to current position
            id: ${stepper}_global
            value: !lambda return id($stepper).current_position; 
        - globals.set: # Set toggle to CLOSED (No need for 'optimistic mode')
            id: openclosed
            value: '0'
        - cover.template.publish:
            id: blind
            state: CLOSED
            current_operation: IDLE
    position_action:
      then:
        - stepper.set_target:
            id: $stepper
            target: !lambda return int(id(endstop) * pos);
        - wait_until: # Wait until endstop reached
            lambda: 'return id($stepper).current_position == (int(id(endstop) * pos));'
        - globals.set: # Set global to current position
            id: ${stepper}_global
            value: !lambda return id($stepper).current_position; 
        - cover.template.publish:
            id: blind
            position: !lambda 'return (float(float(id($stepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
    stop_action:
      then:
        - stepper.set_target:
            id: $stepper
            target: !lambda return id($stepper).current_position;
        - globals.set: # Set global to current position
            id: ${stepper}_global
            value: !lambda return id($stepper).current_position;
        - cover.template.publish:
            id: blind
            position: !lambda 'return (float(float(id($stepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
    has_position: true
    device_class: shade

  
script:

  - id: setupbutton
    then:
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 3);'
          then:
            - logger.log: "Pressed Setup Button: Mode 3"
            - stepper.set_target: # Set Stepper position
                id: $stepper
                target: !lambda return id($stepper).current_position;
            - globals.set: # Set Endstop Variable
                id: endstop
                value: !lambda return id($stepper).current_position;
            - globals.set: # Set Global stepper position
                id: ${stepper}_global
                value: !lambda return id($stepper).current_position;
            - globals.set: # Reset Setting Mode
                id: settingmode
                value:  '0'
            - globals.set: # Set toggle to Open
                id: openclosed
                value: '1'
            - cover.template.publish:
                id: blind
                state: OPEN 
                current_operation: IDLE
            - logger.log: "Exiting Setting Mode"
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 2);'
          then:
            - logger.log: "Pressed Setup Button: Mode 2"
            - stepper.report_position: # Reset Stepper position to 0
                id: $stepper
                position: '0'
            - stepper.set_target: # Reset Stepper position to 0
                id: $stepper
                target: '0'
            - globals.set: # Move stepper to 0 (doesn't move it's already there!)
                id: ${stepper}_global
                value: '0'
            - stepper.set_target: # Reset Stepper position to 150000
                id: $stepper
                target: '600000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value:  '3'
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 1);'
          then:
            - logger.log: "Pressed Setup Button: Mode 1"
            - stepper.report_position: # Set Stepper position to 150000, makes it move to 0 (Closed)
                id: $stepper
                position: '600000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value:  '2'
